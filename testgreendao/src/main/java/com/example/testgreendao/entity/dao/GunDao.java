package com.example.testgreendao.entity.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.testgreendao.entity.bean.Gun;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "db_gun".
*/
public class GunDao extends AbstractDao<Gun, Long> {

    public static final String TABLENAME = "db_gun";

    /**
     * Properties of entity Gun.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GunName = new Property(1, String.class, "gunName", false, "gun_name");
        public final static Property GunNo = new Property(2, String.class, "gunNo", false, "gun_no");
        public final static Property CustomId = new Property(3, Long.class, "customId", false, "custom_id");
    }

    private Query<Gun> user_GunsQuery;

    public GunDao(DaoConfig config) {
        super(config);
    }
    
    public GunDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"db_gun\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"gun_name\" TEXT," + // 1: gunName
                "\"gun_no\" TEXT," + // 2: gunNo
                "\"custom_id\" INTEGER);"); // 3: customId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"db_gun\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gun entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunName = entity.getGunName();
        if (gunName != null) {
            stmt.bindString(2, gunName);
        }
 
        String gunNo = entity.getGunNo();
        if (gunNo != null) {
            stmt.bindString(3, gunNo);
        }
 
        Long customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindLong(4, customId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gun entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunName = entity.getGunName();
        if (gunName != null) {
            stmt.bindString(2, gunName);
        }
 
        String gunNo = entity.getGunNo();
        if (gunNo != null) {
            stmt.bindString(3, gunNo);
        }
 
        Long customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindLong(4, customId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Gun readEntity(Cursor cursor, int offset) {
        Gun entity = new Gun( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gunName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gunNo
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // customId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gun entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGunName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGunNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Gun entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Gun entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gun entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "guns" to-many relationship of User. */
    public List<Gun> _queryUser_Guns(Long customId) {
        synchronized (this) {
            if (user_GunsQuery == null) {
                QueryBuilder<Gun> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomId.eq(null));
                user_GunsQuery = queryBuilder.build();
            }
        }
        Query<Gun> query = user_GunsQuery.forCurrentThread();
        query.setParameter(0, customId);
        return query.list();
    }

}
