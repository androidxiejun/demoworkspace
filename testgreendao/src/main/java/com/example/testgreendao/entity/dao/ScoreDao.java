package com.example.testgreendao.entity.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.testgreendao.entity.bean.StudentScore;

import com.example.testgreendao.entity.bean.Score;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "db_score".
*/
public class ScoreDao extends AbstractDao<Score, Long> {

    public static final String TABLENAME = "db_score";

    /**
     * Properties of entity Score.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScoreName = new Property(1, String.class, "scoreName", false, "score_name");
        public final static Property ScoreCode = new Property(2, String.class, "scoreCode", false, "score_code");
    }

    private DaoSession daoSession;

    private Query<Score> student_ScoreListQuery;

    public ScoreDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"db_score\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"score_name\" TEXT," + // 1: scoreName
                "\"score_code\" TEXT);"); // 2: scoreCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"db_score\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Score entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scoreName = entity.getScoreName();
        if (scoreName != null) {
            stmt.bindString(2, scoreName);
        }
 
        String scoreCode = entity.getScoreCode();
        if (scoreCode != null) {
            stmt.bindString(3, scoreCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Score entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scoreName = entity.getScoreName();
        if (scoreName != null) {
            stmt.bindString(2, scoreName);
        }
 
        String scoreCode = entity.getScoreCode();
        if (scoreCode != null) {
            stmt.bindString(3, scoreCode);
        }
    }

    @Override
    protected final void attachEntity(Score entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Score readEntity(Cursor cursor, int offset) {
        Score entity = new Score( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scoreName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // scoreCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Score entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScoreName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScoreCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Score entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Score entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Score entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "scoreList" to-many relationship of Student. */
    public List<Score> _queryStudent_ScoreList(Long studentId) {
        synchronized (this) {
            if (student_ScoreListQuery == null) {
                QueryBuilder<Score> queryBuilder = queryBuilder();
                queryBuilder.join(StudentScore.class, StudentScoreDao.Properties.ScoreId)
                    .where(StudentScoreDao.Properties.StudentId.eq(studentId));
                student_ScoreListQuery = queryBuilder.build();
            }
        }
        Query<Score> query = student_ScoreListQuery.forCurrentThread();
        query.setParameter(0, studentId);
        return query.list();
    }

}
